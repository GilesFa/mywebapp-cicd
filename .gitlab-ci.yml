#自訂義Gitlab CI/CD的流程階段
stages:
  - compile
  - build-image
  - test-deploy
  - testing
  - prod-deploy

#為test階段前的程式碼進行編譯
compile-for-testing:
  image: mcr.microsoft.com/dotnet/sdk #指定docker gitlab-runner建立dotnet sdk容器進行以下的操作
  stage: compile
  only:
    - master
    - develop
  # cache:
  #   untracked: true
  script: #gitlab runner會把專案下的檔案複製到dotnet sdk容器中，並且以此為工作目錄
    - echo "build for testing"
    - pwd
    - dotnet restore
    - dotnet publish -o out -c Release
    - ls out
  artifacts: #將out產出物存放在gitlab的pipeline的紀錄中
    expire_in: 5 days
    paths:
      #實際在dotnet sdk容器的絕對路徑 : /builds/u09138/mywebapp/out/
      - ./out/
  tags:
    - webapp-builder #指定使用哪個gitlab runner運行此job

#為prodction階段前的程式碼進行編譯
compile-for-prod:
  image: mcr.microsoft.com/dotnet/sdk #指定docker gitlab-runner建立dotnet sdk容器進行以下的操作
  stage: compile
  only:
    - prodction
  script: #gitlab runner會把專案下的檔案複製到dotnet sdk容器中，並且以此為工作目錄
    - echo "build for prodction"
    - pwd
    - dotnet restore
    - dotnet publish -o out -c Release
    - ls out
  artifacts: #將out產出物存放在gitlab的pipeline的紀錄中
    expire_in: 5 days
    paths:
      #實際在dotnet sdk容器的絕對路徑 : /builds/u09138/mywebapp/out/
      - ./out/
  tags:
    - webapp-builder #指定使用哪個gitlab runner運行此job

#為後面進行test階段build docker image
build-docker-image-for-testing:
  image: gitlab/dind
  stage: build-image
  only:
    - master
    - develop
  dependencies:
    - compile-for-testing  # 这里一定要依赖build-job，不然dockerfile里面的out目录无法使用
  script:
    - pwd
    - ls
    - ls ./out/
    - docker ps
    - chmod +x ./check-images-test.sh
    - sh ./check-images-test.sh #檢查是否存在上次未清理的test容器
    - chmod +x ./check-images-prod.sh
    - sh ./check-images-prod.sh #檢查是否存在上次未清理的test容器
    - docker build -t webapp-dotnetcore-test .
    - docker build -t webapp-nginx-test ./nginx
  tags:
    - webapp-deploy

#為後面進行prodction階段build docker image
build-docker-image-for-prod:
  image: gitlab/dind
  stage: build-image
  only:
    - prodction
  dependencies:
    - compile-for-prod # 这里一定要依赖build-job，不然dockerfile里面的out目录无法使用
  script:
    - pwd
    - ls
    - ls ./out/
    - docker ps
    - chmod +x ./check-images-prod.sh
    - sh ./check-images-prod.sh #檢查是否存在上次未清理的prod容器
    - docker build -t gilesfa/webapp-dotnetcore-prod .
    - docker tag gilesfa/webapp-dotnetcore-prod:latest gilesfa/webapp-dotnetcore-prod:$CI_COMMIT_SHORT_SHA
    - docker build -t gilesfa/webapp-nginx-prod ./nginx
    # 这里可以添加将生成好的image上传到dockerhub或者docker本地仓库
    - echo $DOCKERHUB_TOKEN
    - docker login -u gilesfa -p $DOCKERHUB_TOKEN
    - docker push gilesfa/webapp-dotnetcore-prod:latest
    - docker push gilesfa/webapp-dotnetcore-prod:$CI_COMMIT_SHORT_SHA
    - docker push gilesfa/webapp-nginx-prod:latest
  tags:
    - webapp-deploy

#為testing階段進行容器deploy
test-depoly for testing:
  image: gitlab/dind
  stage: test-deploy
  only:
    - master
    - develop
  script:
    - ls
    - docker-compose -f docker-compose-test.yml up -d
    # - sh ./clean-dockerimg.sh
    # - docker system prune --force
 
  tags:
    - webapp-deploy

#為prodction testing階段進行容器deploy
test-depoly for prodction:
  image: gitlab/dind
  stage: test-deploy
  only:
    - prodction
  script:
    - ls
    - docker-compose -f docker-compose-prod.yml up -d
    # - sh ./clean-dockerimg.sh
    # - docker system prune --force
  tags:
    - webapp-deploy

#進行容器服務讀取測試
testing-test:
  image: gitlab/dind
  stage: testing
  only:
    - master
    - develop
  script:
    - docker exec busybox-test curl http://nginx-test:80
    - echo "test testing job pass"
    # - docker system prune --force
  tags:
    - webapp-deploy

testing-prod:
  image: gitlab/dind
  stage: testing
  only:
    - prodction
  script:
    - docker exec busybox-prod curl http://nginx-prod:80
    - echo "prod testing job pass"
    # - docker system prune --force
  tags:
    - webapp-deploy

#進行正式環境容器服務佈署
depoly-for-prodction:
  stage: prod-deploy
  only:
    - prodction
  script:
    - ls
    - chmod +x ./check-images-prod-deploy.sh
    - sh ./check-images-prod-deploy.sh #檢查是否存在上次未清理的prod容器
    - docker-compose -f docker-compose-prod.yml up -d
    - docker system prune --force
  when: manual
  tags:
    - webserver-shell